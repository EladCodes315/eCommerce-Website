{"ast":null,"code":"import * as actionTypes from '../constants/accountConstants';\nimport axios from 'axios';\nexport const getAccounts = () => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.GET_ACCOUNTS_REQUEST\n    });\n    let {\n      data\n    } = await axios.get('http://localhost:4000/accounts');\n    dispatch({\n      type: actionTypes.GET_ACCOUNTS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_ACCOUNTS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getAccountCart = id => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.GET_ACCOUNT_DETAILS_REQUEST\n    });\n    let {\n      data\n    } = await axios.get(`http://localhost:4000/accounts/${id}`);\n    dispatch({\n      type: actionTypes.GET_ACCOUNT_DETAILS_SUCCESS,\n      payload: [...data.cart]\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_ACCOUNT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addAccount = account => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_REQUEST\n    });\n    let {\n      data\n    } = await axios.post('http://localhost:4000/accounts/', account);\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateAccount = (accountToUpdate, id) => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.PUT_ACCOUNT_REQUEST\n    });\n    await axios.put(`http://localhost:4000/accounts/${id}`, accountToUpdate);\n    dispatch({\n      type: actionTypes.PUT_ACCOUNT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.PUT_ACCOUNT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/elada/OneDrive/שולחן העבודה/Fullstack Projects/eCommerce-Website/frontend/src/redux/actions/accountActions.js"],"names":["actionTypes","axios","getAccounts","dispatch","type","GET_ACCOUNTS_REQUEST","data","get","GET_ACCOUNTS_SUCCESS","payload","error","GET_ACCOUNTS_FAIL","response","message","getAccountCart","id","GET_ACCOUNT_DETAILS_REQUEST","GET_ACCOUNT_DETAILS_SUCCESS","cart","GET_ACCOUNT_DETAILS_FAIL","addAccount","account","POST_ACCOUNT_REQUEST","post","POST_ACCOUNT_SUCCESS","POST_ACCOUNT_FAIL","updateAccount","accountToUpdate","PUT_ACCOUNT_REQUEST","put","PUT_ACCOUNT_SUCCESS","PUT_ACCOUNT_FAIL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../constants/accountConstants';\r\nimport axios from 'axios';\r\n\r\nexport const getAccounts = () => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.GET_ACCOUNTS_REQUEST });\r\n\t\tlet { data } = await axios.get('http://localhost:4000/accounts');\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.GET_ACCOUNTS_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.GET_ACCOUNTS_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const getAccountCart = id => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.GET_ACCOUNT_DETAILS_REQUEST });\r\n\t\tlet { data } = await axios.get(`http://localhost:4000/accounts/${id}`);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.GET_ACCOUNT_DETAILS_SUCCESS,\r\n\t\t\tpayload: [ ...data.cart ]\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.GET_ACCOUNT_DETAILS_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addAccount = account => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.POST_ACCOUNT_REQUEST });\r\n\t\tlet { data } = await axios.post('http://localhost:4000/accounts/', account);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const updateAccount = (accountToUpdate, id) => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.PUT_ACCOUNT_REQUEST });\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${id}`, accountToUpdate);\r\n\t\tdispatch({ type: actionTypes.PUT_ACCOUNT_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.PUT_ACCOUNT_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}