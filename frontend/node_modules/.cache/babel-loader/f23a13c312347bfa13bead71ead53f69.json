{"ast":null,"code":"import * as actionTypes from '../constants/accountConstants';\nimport axios from 'axios'; // export const getAccounts = () => async dispatch => {\n// \ttry {\n// \t\tdispatch({ type: actionTypes.GET_ACCOUNTS_REQUEST });\n// \t\tlet { data } = await axios.get('http://localhost:4000/accounts');\n// \t\tdispatch({\n// \t\t\ttype: actionTypes.GET_ACCOUNTS_SUCCESS,\n// \t\t\tpayload: data\n// \t\t});\n// \t} catch (error) {\n// \t\tdispatch({\n// \t\t\ttype: actionTypes.GET_ACCOUNTS_FAIL,\n// \t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\n// \t\t});\n// \t}\n// };\n\nexport const addAccount = account => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_REQUEST\n    });\n    let {\n      data\n    } = await axios.post('http://localhost:4000/accounts/', account);\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getAccountCart = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.LOAD_ACCOUNT_CART_REQUEST\n    });\n    let {\n      data\n    } = await axios.get(`http://localhost:4000/accounts/${id}`);\n    dispatch({\n      type: actionTypes.LOAD_ACCOUNT_CART_SUCCESS,\n      payload: [...data.cart]\n    });\n    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.LOAD_ACCOUNT_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addToCart = (productId, quantity, account) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.ADD_TO_CART_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`http://localhost:4000/products/${productId}`);\n    const existInCart = getState().accounts.loggedUser.cart.find(x => x.productId === data.productId);\n    let newCart = [];\n\n    if (existInCart) {\n      newCart = account.cart.map(x => x.productId === existInCart.productId ? data : x);\n    } else {\n      account.cart.push({\n        productId: data._id,\n        name: data.name,\n        imageUrl: data.imageUrl,\n        price: data.price,\n        countInStock: data.countInStock,\n        quantity: parseInt(quantity)\n      });\n      newCart = [...account.cart, {\n        productId: data._id,\n        name: data.name,\n        imageUrl: data.imageUrl,\n        price: data.price,\n        countInStock: data.countInStock,\n        quantity: parseInt(quantity)\n      }];\n    }\n\n    await axios.put(`http://localhost:4000/accounts/${account._id}`, [...account.cart]);\n    dispatch({\n      type: actionTypes.ADD_TO_CART_SUCCESS,\n      payload: {\n        productId: data._id,\n        name: data.name,\n        imageUrl: data.imageUrl,\n        price: data.price,\n        countInStock: data.countInStock,\n        quantity\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(getState().accounts.loggedUser.cart));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.ADD_TO_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const removeFromCart = (productId, account) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_REQUEST\n    });\n    let newCart = [...account.cart.filter(product => product.productId !== productId)];\n    await axios.put(`http://localhost:4000/accounts/${account._id}`, newCart);\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_SUCCESS,\n      payload: newCart\n    });\n    localStorage.setItem('cart', JSON.stringify(getState().accounts.loggedUser.cart));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/elada/OneDrive/שולחן העבודה/Fullstack Projects/eCommerce-Website/frontend/src/redux/actions/accountActions.js"],"names":["actionTypes","axios","addAccount","account","dispatch","type","POST_ACCOUNT_REQUEST","data","post","POST_ACCOUNT_SUCCESS","payload","error","POST_ACCOUNT_FAIL","response","message","getAccountCart","id","getState","LOAD_ACCOUNT_CART_REQUEST","get","LOAD_ACCOUNT_CART_SUCCESS","cart","localStorage","setItem","JSON","stringify","cartItems","LOAD_ACCOUNT_CART_FAIL","addToCart","productId","quantity","ADD_TO_CART_REQUEST","existInCart","accounts","loggedUser","find","x","newCart","map","push","_id","name","imageUrl","price","countInStock","parseInt","put","ADD_TO_CART_SUCCESS","ADD_TO_CART_FAIL","removeFromCart","REMOVE_FROM_CART_REQUEST","filter","product","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_FAIL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../constants/accountConstants';\r\nimport axios from 'axios';\r\n\r\n// export const getAccounts = () => async dispatch => {\r\n// \ttry {\r\n// \t\tdispatch({ type: actionTypes.GET_ACCOUNTS_REQUEST });\r\n// \t\tlet { data } = await axios.get('http://localhost:4000/accounts');\r\n// \t\tdispatch({\r\n// \t\t\ttype: actionTypes.GET_ACCOUNTS_SUCCESS,\r\n// \t\t\tpayload: data\r\n// \t\t});\r\n// \t} catch (error) {\r\n// \t\tdispatch({\r\n// \t\t\ttype: actionTypes.GET_ACCOUNTS_FAIL,\r\n// \t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n// \t\t});\r\n// \t}\r\n// };\r\n\r\nexport const addAccount = account => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.POST_ACCOUNT_REQUEST });\r\n\t\tlet { data } = await axios.post('http://localhost:4000/accounts/', account);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const getAccountCart = id => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.LOAD_ACCOUNT_CART_REQUEST });\r\n\t\tlet { data } = await axios.get(`http://localhost:4000/accounts/${id}`);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.LOAD_ACCOUNT_CART_SUCCESS,\r\n\t\t\tpayload: [ ...data.cart ]\r\n\t\t});\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.LOAD_ACCOUNT_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addToCart = (productId, quantity, account) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.ADD_TO_CART_REQUEST });\r\n\t\tconst { data } = await axios.get(`http://localhost:4000/products/${productId}`);\r\n\t\tconst existInCart = getState().accounts.loggedUser.cart.find(x => x.productId === data.productId);\r\n\r\n\t\tlet newCart = [];\r\n\t\tif (existInCart) {\r\n\t\t\tnewCart = account.cart.map(x => (x.productId === existInCart.productId ? data : x));\r\n\t\t}\r\n\t\telse {\r\n\t\t\taccount.cart.push({\r\n\t\t\t\tproductId: data._id,\r\n\t\t\t\tname: data.name,\r\n\t\t\t\timageUrl: data.imageUrl,\r\n\t\t\t\tprice: data.price,\r\n\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\tquantity: parseInt(quantity)\r\n\t\t\t});\r\n\t\t\tnewCart = [\r\n\t\t\t\t...account.cart,\r\n\t\t\t\t{\r\n\t\t\t\t\tproductId: data._id,\r\n\t\t\t\t\tname: data.name,\r\n\t\t\t\t\timageUrl: data.imageUrl,\r\n\t\t\t\t\tprice: data.price,\r\n\t\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\t\tquantity: parseInt(quantity)\r\n\t\t\t\t}\r\n\t\t\t];\r\n\t\t}\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}`, [ ...account.cart ]);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.ADD_TO_CART_SUCCESS,\r\n\t\t\tpayload: {\r\n\t\t\t\tproductId: data._id,\r\n\t\t\t\tname: data.name,\r\n\t\t\t\timageUrl: data.imageUrl,\r\n\t\t\t\tprice: data.price,\r\n\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\tquantity\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(getState().accounts.loggedUser.cart));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.ADD_TO_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const removeFromCart = (productId, account) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.REMOVE_FROM_CART_REQUEST });\r\n\r\n\t\tlet newCart = [ ...account.cart.filter(product => product.productId !== productId) ];\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}`, newCart);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.REMOVE_FROM_CART_SUCCESS,\r\n\t\t\tpayload: newCart\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(getState().accounts.loggedUser.cart));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.REMOVE_FROM_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}