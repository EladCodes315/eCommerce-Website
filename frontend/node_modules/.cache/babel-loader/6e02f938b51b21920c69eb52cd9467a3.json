{"ast":null,"code":"import * as actionTypes from '../constants/accountConstants';\nimport axios from 'axios';\nexport const getAccounts = () => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.GET_ACCOUNTS_REQUEST\n    });\n    let {\n      data\n    } = await axios.get('http://localhost:4000/accounts');\n    dispatch({\n      type: actionTypes.GET_ACCOUNTS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_ACCOUNTS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addAccount = account => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_REQUEST\n    });\n    let {\n      data\n    } = await axios.post('http://localhost:4000/accounts/', account);\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addToCart = (productId, quantity, account) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.ADD_TO_CART_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`http://localhost:4000/products/${productId}`);\n    account.cart.push({\n      productId: data._id,\n      name: data.name,\n      imageUrl: data.imageUrl,\n      price: data.price,\n      countInStock: data.countInStock,\n      quantity\n    });\n    let accountToUpdate = {\n      username: account.username,\n      password: account.password,\n      cart: [...account.cart]\n    };\n    await axios.put(`http://localhost:4000/accounts/${account._id}`, [...account.cart]);\n    dispatch({\n      type: actionTypes.ADD_TO_CART_SUCCESS,\n      payload: {\n        productId: data._id,\n        name: data.name,\n        imageUrl: data.imageUrl,\n        price: data.price,\n        countInStock: data.countInStock,\n        quantity\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.ADD_TO_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const removeFromCart = (productId, account) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_REQUEST\n    });\n    await axios.put(`http://localhost:4000/accounts/${account._id}`, [...account.cart.filter(product => product.productId !== productId)]);\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_SUCCESS,\n      payload: productId\n    });\n    localStorage.setItem('cart', JSON.stringify(getState().getAccounts.loggedUser.cart));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getAccountCart = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.LOAD_ACCOUNT_CART_REQUEST\n    });\n    let {\n      data\n    } = await axios.get(`http://localhost:4000/accounts/${id}`);\n    dispatch({\n      type: actionTypes.LOAD_ACCOUNT_CART_SUCCESS,\n      payload: [...data.cart]\n    });\n    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.LOAD_ACCOUNT_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/elada/OneDrive/שולחן העבודה/Fullstack Projects/eCommerce-Website/frontend/src/redux/actions/accountActions.js"],"names":["actionTypes","axios","getAccounts","dispatch","type","GET_ACCOUNTS_REQUEST","data","get","GET_ACCOUNTS_SUCCESS","payload","error","GET_ACCOUNTS_FAIL","response","message","addAccount","account","POST_ACCOUNT_REQUEST","post","POST_ACCOUNT_SUCCESS","POST_ACCOUNT_FAIL","addToCart","productId","quantity","getState","ADD_TO_CART_REQUEST","cart","push","_id","name","imageUrl","price","countInStock","accountToUpdate","username","password","put","ADD_TO_CART_SUCCESS","localStorage","setItem","JSON","stringify","cartItems","ADD_TO_CART_FAIL","removeFromCart","REMOVE_FROM_CART_REQUEST","filter","product","REMOVE_FROM_CART_SUCCESS","loggedUser","REMOVE_FROM_CART_FAIL","getAccountCart","id","LOAD_ACCOUNT_CART_REQUEST","LOAD_ACCOUNT_CART_SUCCESS","LOAD_ACCOUNT_CART_FAIL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../constants/accountConstants';\r\nimport axios from 'axios';\r\n\r\nexport const getAccounts = () => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.GET_ACCOUNTS_REQUEST });\r\n\t\tlet { data } = await axios.get('http://localhost:4000/accounts');\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.GET_ACCOUNTS_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.GET_ACCOUNTS_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addAccount = account => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.POST_ACCOUNT_REQUEST });\r\n\t\tlet { data } = await axios.post('http://localhost:4000/accounts/', account);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addToCart = (productId, quantity, account) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.ADD_TO_CART_REQUEST });\r\n\t\tconst { data } = await axios.get(`http://localhost:4000/products/${productId}`);\r\n\r\n\t\taccount.cart.push({\r\n\t\t\tproductId: data._id,\r\n\t\t\tname: data.name,\r\n\t\t\timageUrl: data.imageUrl,\r\n\t\t\tprice: data.price,\r\n\t\t\tcountInStock: data.countInStock,\r\n\t\t\tquantity\r\n\t\t});\r\n\t\tlet accountToUpdate = {\r\n\t\t\tusername: account.username,\r\n\t\t\tpassword: account.password,\r\n\t\t\tcart: [ ...account.cart ]\r\n\t\t};\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}`, [ ...account.cart ]);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.ADD_TO_CART_SUCCESS,\r\n\t\t\tpayload: {\r\n\t\t\t\tproductId: data._id,\r\n\t\t\t\tname: data.name,\r\n\t\t\t\timageUrl: data.imageUrl,\r\n\t\t\t\tprice: data.price,\r\n\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\tquantity\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.ADD_TO_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const removeFromCart = (productId, account) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.REMOVE_FROM_CART_REQUEST });\r\n\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}`, [ ...account.cart.filter(product => product.productId !== productId) ]);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.REMOVE_FROM_CART_SUCCESS,\r\n\t\t\tpayload: productId\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(getState().getAccounts.loggedUser.cart));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.REMOVE_FROM_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const getAccountCart = id => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.LOAD_ACCOUNT_CART_REQUEST });\r\n\t\tlet { data } = await axios.get(`http://localhost:4000/accounts/${id}`);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.LOAD_ACCOUNT_CART_SUCCESS,\r\n\t\t\tpayload: [ ...data.cart ]\r\n\t\t});\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.LOAD_ACCOUNT_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}