{"ast":null,"code":"import * as actionTypes from '../constants/accountConstants';\nexport const getAccountsReducer = (state = {\n  accounts: [],\n  loggedUser: {}\n}, action) => {\n  switch (action.type) {\n    // case actionTypes.GET_ACCOUNTS_REQUEST: {\n    // \treturn {\n    // \t\tloading: true,\n    // \t\tloggedUser: localStorage.getItem('loggedUser') ? JSON.parse(localStorage.getItem('loggedUser')) : {},\n    // \t\taccounts: []\n    // \t};\n    // }\n    // case actionTypes.GET_ACCOUNTS_SUCCESS: {\n    // \treturn {\n    // \t\tloading: false,\n    // \t\tloggedUser: localStorage.getItem('loggedUser') ? JSON.parse(localStorage.getItem('loggedUser')) : {},\n    // \t\taccounts: action.payload\n    // \t};\n    // }\n    // case actionTypes.GET_ACCOUNTS_FAIL: {\n    // \treturn {\n    // \t\tloading: false,\n    // \t\tloggedUser: localStorage.getItem('loggedUser') ? JSON.parse(localStorage.getItem('loggedUser')) : {},\n    // \t\terror: action.payload\n    // \t};\n    // }\n    case actionTypes.POST_ACCOUNT_REQUEST:\n      {\n        return {\n          loading: true,\n          accounts: [...state.accounts]\n        };\n      }\n\n    case actionTypes.POST_ACCOUNT_SUCCESS:\n      {\n        return {\n          loading: false,\n          accounts: [...state.accounts, action.payload]\n        };\n      }\n\n    case actionTypes.POST_ACCOUNT_FAIL:\n      {\n        return {\n          loading: false,\n          error: action.payload\n        };\n      }\n\n    case actionTypes.LOGIN_ACCOUNT:\n      {\n        localStorage.setItem('loggedUser', JSON.stringify(action.payload));\n        return {\n          loggedUser: action.payload,\n          accounts: [...state.accounts]\n        };\n      }\n    // case actionTypes.LOAD_ACCOUNT_CART_REQUEST: {\n    // \treturn {\n    // \t\tloading: true,\n    // \t\tcartItems: []\n    // \t};\n    // }\n    // case actionTypes.LOAD_ACCOUNT_CART_SUCCESS: {\n    // \treturn {\n    // \t\tloading: false,\n    // \t\tcartItems: action.payload\n    // \t};\n    // }\n    // case actionTypes.LOAD_ACCOUNT_CART_FAIL: {\n    // \treturn {\n    // \t\tloading: false,\n    // \t\terror: action.payload\n    // \t};\n    // }\n\n    case actionTypes.ADD_TO_CART_REQUEST:\n      {\n        return {\n          loading: true,\n          cartItems: [...state.cartItems]\n        };\n      }\n\n    case actionTypes.ADD_TO_CART_SUCCESS:\n      {\n        const item = action.payload;\n        const existInCart = state.loggedUser.cart.find(x => x.productId === item.productId);\n\n        if (existInCart) {\n          return {\n            loading: false,\n            loggedUser: { ...state.loggedUser,\n              cart: state.loggedUser.cart.map(x => x.productId === existInCart.productId ? item : x)\n            }\n          };\n        } else {\n          return {\n            loading: false,\n            loggedUser: { ...state.loggedUser,\n              cart: [...state.loggedUser.cart, item]\n            }\n          };\n        }\n      }\n\n    case actionTypes.ADD_TO_CART_FAIL:\n      {\n        return {\n          loading: false,\n          error: action.payload\n        };\n      }\n\n    case actionTypes.REMOVE_FROM_CART_REQUEST:\n      {\n        return {\n          loading: true,\n          loggedUser: { ...state.loggedUser\n          }\n        };\n      }\n\n    case actionTypes.REMOVE_FROM_CART_SUCCESS:\n      {\n        return { ...state,\n          loading: false,\n          loggedUser: { ...state.loggedUser,\n            cart: action.payload\n          }\n        };\n      }\n\n    case actionTypes.REMOVE_FROM_CART_FAIL:\n      {\n        return {\n          loading: false,\n          loggedUser: { ...state.loggedUser\n          },\n          error: action.payload\n        };\n      }\n\n    case actionTypes.LOGOUT_ACCOUNT:\n      {\n        localStorage.setItem('loggedUser', {});\n        return {\n          loggedUser: {},\n          accounts: [...state.accounts]\n        };\n      }\n\n    case actionTypes.RESET_CART:\n      {\n        localStorage.setItem('cart', []);\n        return {\n          loading: false,\n          cartItems: []\n        };\n      }\n\n    default:\n      {\n        return { ...state\n        };\n      }\n  }\n};","map":{"version":3,"sources":["C:/Users/elada/OneDrive/שולחן העבודה/Fullstack Projects/eCommerce-Website/frontend/src/redux/reducers/accountReducers.js"],"names":["actionTypes","getAccountsReducer","state","accounts","loggedUser","action","type","POST_ACCOUNT_REQUEST","loading","POST_ACCOUNT_SUCCESS","payload","POST_ACCOUNT_FAIL","error","LOGIN_ACCOUNT","localStorage","setItem","JSON","stringify","ADD_TO_CART_REQUEST","cartItems","ADD_TO_CART_SUCCESS","item","existInCart","cart","find","x","productId","map","ADD_TO_CART_FAIL","REMOVE_FROM_CART_REQUEST","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_FAIL","LOGOUT_ACCOUNT","RESET_CART"],"mappings":"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","sourcesContent":["import * as actionTypes from '../constants/accountConstants';\r\n\r\nexport const getAccountsReducer = (state = { accounts: [], loggedUser: {} }, action) => {\r\n\tswitch (action.type) {\r\n\t\t// case actionTypes.GET_ACCOUNTS_REQUEST: {\r\n\t\t// \treturn {\r\n\t\t// \t\tloading: true,\r\n\t\t// \t\tloggedUser: localStorage.getItem('loggedUser') ? JSON.parse(localStorage.getItem('loggedUser')) : {},\r\n\t\t// \t\taccounts: []\r\n\t\t// \t};\r\n\t\t// }\r\n\t\t// case actionTypes.GET_ACCOUNTS_SUCCESS: {\r\n\t\t// \treturn {\r\n\t\t// \t\tloading: false,\r\n\t\t// \t\tloggedUser: localStorage.getItem('loggedUser') ? JSON.parse(localStorage.getItem('loggedUser')) : {},\r\n\t\t// \t\taccounts: action.payload\r\n\t\t// \t};\r\n\t\t// }\r\n\t\t// case actionTypes.GET_ACCOUNTS_FAIL: {\r\n\t\t// \treturn {\r\n\t\t// \t\tloading: false,\r\n\t\t// \t\tloggedUser: localStorage.getItem('loggedUser') ? JSON.parse(localStorage.getItem('loggedUser')) : {},\r\n\t\t// \t\terror: action.payload\r\n\t\t// \t};\r\n\t\t// }\r\n\t\tcase actionTypes.POST_ACCOUNT_REQUEST: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: true,\r\n\t\t\t\taccounts: [ ...state.accounts ]\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.POST_ACCOUNT_SUCCESS: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\taccounts: [ ...state.accounts, action.payload ]\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.POST_ACCOUNT_FAIL: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.LOGIN_ACCOUNT: {\r\n\t\t\tlocalStorage.setItem('loggedUser', JSON.stringify(action.payload));\r\n\t\t\treturn {\r\n\t\t\t\tloggedUser: action.payload,\r\n\t\t\t\taccounts: [ ...state.accounts ]\r\n\t\t\t};\r\n\t\t}\r\n\t\t// case actionTypes.LOAD_ACCOUNT_CART_REQUEST: {\r\n\t\t// \treturn {\r\n\t\t// \t\tloading: true,\r\n\t\t// \t\tcartItems: []\r\n\t\t// \t};\r\n\t\t// }\r\n\t\t// case actionTypes.LOAD_ACCOUNT_CART_SUCCESS: {\r\n\t\t// \treturn {\r\n\t\t// \t\tloading: false,\r\n\t\t// \t\tcartItems: action.payload\r\n\t\t// \t};\r\n\t\t// }\r\n\t\t// case actionTypes.LOAD_ACCOUNT_CART_FAIL: {\r\n\t\t// \treturn {\r\n\t\t// \t\tloading: false,\r\n\t\t// \t\terror: action.payload\r\n\t\t// \t};\r\n\t\t// }\r\n\t\tcase actionTypes.ADD_TO_CART_REQUEST: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: true,\r\n\t\t\t\tcartItems: [ ...state.cartItems ]\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.ADD_TO_CART_SUCCESS: {\r\n\t\t\tconst item = action.payload;\r\n\t\t\tconst existInCart = state.loggedUser.cart.find(x => x.productId === item.productId);\r\n\t\t\tif (existInCart) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t\tloggedUser: { ...state.loggedUser, cart: state.loggedUser.cart.map(x => (x.productId === existInCart.productId ? item : x)) }\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t\tloggedUser: { ...state.loggedUser, cart: [ ...state.loggedUser.cart, item ] }\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase actionTypes.ADD_TO_CART_FAIL: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.REMOVE_FROM_CART_REQUEST: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: true,\r\n\t\t\t\tloggedUser: { ...state.loggedUser }\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.REMOVE_FROM_CART_SUCCESS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\tloggedUser: { ...state.loggedUser, cart: action.payload }\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.REMOVE_FROM_CART_FAIL: {\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tloggedUser: { ...state.loggedUser },\r\n\t\t\t\terror: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.LOGOUT_ACCOUNT: {\r\n\t\t\tlocalStorage.setItem('loggedUser', {});\r\n\t\t\treturn {\r\n\t\t\t\tloggedUser: {},\r\n\t\t\t\taccounts: [ ...state.accounts ]\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase actionTypes.RESET_CART: {\r\n\t\t\tlocalStorage.setItem('cart', []);\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tcartItems: []\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn { ...state };\r\n\t\t}\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}