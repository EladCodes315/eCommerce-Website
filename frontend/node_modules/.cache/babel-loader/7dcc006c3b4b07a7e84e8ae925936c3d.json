{"ast":null,"code":"import * as actionTypes from '../constants/accountConstants';\nimport axios from 'axios';\nexport const addAccount = account => async dispatch => {\n  try {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_REQUEST\n    });\n    await axios.post('http://localhost:4000/accounts', { ...account\n    });\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actionTypes.POST_ACCOUNT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addToCart = (productId, quantity, account) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.ADD_TO_CART_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`http://localhost:4000/products/${productId}`);\n    const existInCart = account.cart.find(x => x.productId === data._id);\n    let newCart = [];\n\n    if (existInCart) {\n      newCart = account.cart.map(x => x.productId === existInCart.productId ? {\n        productId: data._id,\n        name: data.name,\n        imageUrl: data.imageUrl,\n        price: data.price,\n        countInStock: data.countInStock,\n        quantity: parseInt(quantity)\n      } : x);\n    } else {\n      newCart = [...account.cart, {\n        productId: data._id,\n        name: data.name,\n        imageUrl: data.imageUrl,\n        price: data.price,\n        countInStock: data.countInStock,\n        quantity: parseInt(quantity)\n      }];\n    }\n\n    await axios.put(`http://localhost:4000/accounts/${account._id}/accountcart`, newCart);\n    dispatch({\n      type: actionTypes.ADD_TO_CART_SUCCESS,\n      payload: newCart\n    });\n    localStorage.setItem('loggedUser', JSON.stringify(getState().getLoggedUser.loggedUser));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.ADD_TO_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const removeFromCart = (productId, account) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_REQUEST\n    });\n    let newCart = [...account.cart.filter(product => product.productId !== productId)];\n    await axios.put(`http://localhost:4000/accounts/${account._id}/accountcart`, newCart);\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_SUCCESS,\n      payload: newCart\n    });\n    localStorage.setItem('loggedUser', JSON.stringify(getState().getLoggedUser.loggedUser));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.REMOVE_FROM_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const resetCart = account => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: actionTypes.RESET_CART_REQUEST\n    });\n    await axios.put(`http://localhost:4000/accounts/${account._id}/accountcart`, []);\n    dispatch({\n      type: actionTypes.RESET_CART_SUCCESS\n    });\n    localStorage.setItem('loggedUser', JSON.stringify(getState().getLoggedUser.loggedUser));\n  } catch (error) {\n    dispatch({\n      type: actionTypes.RESET_CART_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/elada/OneDrive/שולחן העבודה/Fullstack Projects/eCommerce-Website/frontend/src/redux/actions/accountActions.js"],"names":["actionTypes","axios","addAccount","account","dispatch","type","POST_ACCOUNT_REQUEST","post","POST_ACCOUNT_SUCCESS","error","POST_ACCOUNT_FAIL","payload","response","data","message","addToCart","productId","quantity","getState","ADD_TO_CART_REQUEST","get","existInCart","cart","find","x","_id","newCart","map","name","imageUrl","price","countInStock","parseInt","put","ADD_TO_CART_SUCCESS","localStorage","setItem","JSON","stringify","getLoggedUser","loggedUser","ADD_TO_CART_FAIL","removeFromCart","REMOVE_FROM_CART_REQUEST","filter","product","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_FAIL","resetCart","RESET_CART_REQUEST","RESET_CART_SUCCESS","RESET_CART_FAIL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../constants/accountConstants';\r\nimport axios from 'axios';\r\n\r\nexport const addAccount = account => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.POST_ACCOUNT_REQUEST });\r\n\t\tawait axios.post('http://localhost:4000/accounts', { ...account });\r\n\t\tdispatch({ type: actionTypes.POST_ACCOUNT_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.POST_ACCOUNT_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addToCart = (productId, quantity, account) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.ADD_TO_CART_REQUEST });\r\n\t\tconst { data } = await axios.get(`http://localhost:4000/products/${productId}`);\r\n\t\tconst existInCart = account.cart.find(x => x.productId === data._id);\r\n\r\n\t\tlet newCart = [];\r\n\t\tif (existInCart) {\r\n\t\t\tnewCart = account.cart.map(\r\n\t\t\t\tx =>\r\n\t\t\t\t\tx.productId === existInCart.productId\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\tproductId: data._id,\r\n\t\t\t\t\t\t\t\tname: data.name,\r\n\t\t\t\t\t\t\t\timageUrl: data.imageUrl,\r\n\t\t\t\t\t\t\t\tprice: data.price,\r\n\t\t\t\t\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\t\t\t\t\tquantity: parseInt(quantity)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t: x\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnewCart = [\r\n\t\t\t\t...account.cart,\r\n\t\t\t\t{\r\n\t\t\t\t\tproductId: data._id,\r\n\t\t\t\t\tname: data.name,\r\n\t\t\t\t\timageUrl: data.imageUrl,\r\n\t\t\t\t\tprice: data.price,\r\n\t\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\t\tquantity: parseInt(quantity)\r\n\t\t\t\t}\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}/accountcart`, newCart);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.ADD_TO_CART_SUCCESS,\r\n\t\t\tpayload: newCart\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('loggedUser', JSON.stringify(getState().getLoggedUser.loggedUser));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.ADD_TO_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const removeFromCart = (productId, account) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.REMOVE_FROM_CART_REQUEST });\r\n\r\n\t\tlet newCart = [ ...account.cart.filter(product => product.productId !== productId) ];\r\n\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}/accountcart`, newCart);\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.REMOVE_FROM_CART_SUCCESS,\r\n\t\t\tpayload: newCart\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('loggedUser', JSON.stringify(getState().getLoggedUser.loggedUser));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.REMOVE_FROM_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const resetCart = account => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: actionTypes.RESET_CART_REQUEST });\r\n\r\n\t\tawait axios.put(`http://localhost:4000/accounts/${account._id}/accountcart`, []);\r\n\t\tdispatch({ type: actionTypes.RESET_CART_SUCCESS });\r\n\r\n\t\tlocalStorage.setItem('loggedUser', JSON.stringify(getState().getLoggedUser.loggedUser));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: actionTypes.RESET_CART_FAIL,\r\n\t\t\tpayload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}